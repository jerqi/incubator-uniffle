syntax = "proto3";
import "google/protobuf/empty.proto";
option java_package = "com.tencent.rss.proto";
option java_outer_classname = "RssProtos";
option java_generate_equals_and_hash = true;
package rss.common;

service ShuffleServer {
  rpc registerShuffle (ShuffleRegisterRequest) returns (ShuffleRegisterResponse) {}
  rpc sendShuffleData (SendShuffleDataRequest) returns (SendShuffleDataResponse) {}
  rpc commitShuffleTask (ShuffleCommitRequest) returns (ShuffleCommitResponse) {}
}

message ShuffleRegisterRequest {
  string appId = 1;
  int32 shuffleId = 2;
  int32 start = 3; // start partition
  int32 end = 4; // end partition
}

message ShuffleRegisterResponse {
  StatusCode status = 1;
  string retMsg = 2;
}

message SendShuffleDataRequest {
  string appId = 1;
  int32 shuffleId = 2;
  repeated ShuffleData shuffleData = 3;
}

message SendShuffleDataResponse {
  StatusCode status = 1;
  string retMsg = 2;
}

message ShuffleData {
  int32 partitionId = 1;
  repeated ShuffleBlock block = 2;
}

message ShuffleBlock {
  int64 blockId = 1;
  int32 length = 2;
  int64 crc = 3;
  bytes data = 4;
}

message ShuffleCommitRequest {
  string appId = 1;
  int32 shuffleId = 2;
}

message ShuffleCommitResponse {
  StatusCode status = 1;
  string retMsg = 2;
}

message ServerRegisterRequest {
  ShuffleServerId serverId = 1;
}

message ServerRegisterResponse {
  StatusCode status = 1;
  string retMsg = 2;
}

message ServerRemoveRequest {
  ShuffleServerId serverId = 1;
}

message ServerRemoveResponse {
  StatusCode status = 1;
  string retMsg = 2;
}

message ShuffleServerHeartBeatRequest {
  ShuffleServerId serverId = 1;
  bool available = 2;
  int32 usedBuffer = 3;
}

message ShuffleServerHeartBeatResponse {
  StatusCode status = 1;
  string retMsg = 2;
}

message ShuffleServerId {
  string id = 1;
  string ip = 2;
  int32 port = 3;
}

/** Status code to identify the status of response */
enum StatusCode {
  SUCCESS = 0;
  INTERNAL_ERROR = 1;
  // add more status
}



service CoordinatorServer {
  // Register/Unregister Shuffle Server
  rpc registerShuffleServer(ServerRegisterRequest) returns (ServerRegisterResponse);
  rpc removeShuffleServer(ServerRemoveRequest) returns (ServerRemoveResponse);

  // Get Shuffle Server list
  rpc getShuffleServerList(google.protobuf.Empty) returns (GetShuffleServerListResponse);

  // Count Shuffle Server number
  rpc getShuffleServerNum(google.protobuf.Empty) returns (GetShuffleServerNumResponse);

  // Ask for suitable Shuffle Servers with partitions
  rpc getShuffleAssignments(GetShuffleServerRequest) returns (GetShuffleAssignmentsResponse);

  // Heartbeat between Shuffle Server and Coordinator Server
  rpc heartbeat(ShuffleServerHeartBeatRequest) returns (ShuffleServerHeartBeatResponse);

  // Get the global configuration of this Rss-cluster, i.e., data storage info
  rpc getShuffleDataStorageInfo(google.protobuf.Empty) returns (GetShuffleDataStorageInfoResponse);
  rpc checkServiceAvailable(google.protobuf.Empty) returns (CheckServiceAvailableResponse);

  // Report a client operation's result to coordinator server
  rpc reportClientOperation(ReportShuffleClientOpRequest) returns (ReportShuffleClientOpResponse);
}

message GetShuffleServerListResponse {
  repeated ShuffleServerId servers = 1;
}

message GetShuffleServerNumResponse {
  int32 num = 1;
}

message GetShuffleServerRequest {
  string clientHost = 1;
  string clientPort = 2;
  string clientProperty = 3;
  string applicationId = 4;
  int32 shuffleId = 5;
  int32 partitionNum = 6;
  int32 partitionPerServer = 7;
}

message ShuffleServerIdWithPartitionInfo {
  repeated ShuffleServerId server = 1;
  repeated int32 partitions = 2;
}

message GetShuffleAssignmentsResponse {
  repeated ShuffleServerIdWithPartitionInfo serverInfos = 1;
}

message ReportShuffleClientOpRequest {
  string clientHost = 1;
  int32 clientPort = 2;
  ShuffleServerId server = 3;
  string operation = 4;
}

message ReportShuffleClientOpResponse {
  StatusCode status = 1;
  string retMsg = 2;
}

message GetShuffleDataStorageInfoResponse {
  string storage = 1;
  string storagePath = 2;
  string storagePattern = 3;
}

message CheckServiceAvailableResponse {
  bool available = 1;
}

